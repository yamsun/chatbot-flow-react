{"ast":null,"code":"var _jsxFileName = \"/home/avik/Documents/shyam/chatbot-flow/chatbot-flow-react/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, useNodesState, useEdgesState, Controls, Background } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport Sidebar from './Sidebar';\nimport CustomNode from './CustomNode'; // Import Custom Node Component\nimport './index.css';\nimport Topbar from './Topbar';\nimport SettingsPanel from './SettingsPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  type: 'message',\n  // Specify the custom node type\n  data: {\n    label: 'Custom Node'\n  },\n  position: {\n    x: 250,\n    y: 20\n  },\n  sourcePosition: 'right',\n  targetPosition: 'left'\n}, {\n  id: '2',\n  type: 'message',\n  // Specify the custom node type\n  data: {\n    label: 'Custom Node'\n  },\n  position: {\n    x: 550,\n    y: 120\n  },\n  sourcePosition: 'right',\n  targetPosition: 'left'\n}];\nconst initialEdges = [{\n  id: 'e1-2',\n  source: '1',\n  target: '2'\n}];\nconst nodeTypes = {\n  'message': CustomNode\n};\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\nconst DnDFlow = () => {\n  _s();\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isSettingsPanelOpen, setIsSettingsPanelOpen] = useState(false);\n  console.log({\n    selectedNode\n  });\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = reactFlowInstance.project({\n      x: event.clientX,\n      y: event.clientY\n    });\n    const newNode = {\n      id: getId(),\n      type: 'message',\n      // Specify the custom node type\n      sourcePosition: 'right',\n      targetPosition: 'left',\n      position,\n      data: {\n        label: 'New Custom Node'\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [reactFlowInstance, setNodes]);\n  const onNodeClick = useCallback((event, node) => {\n    console.log(\"hello world\");\n    setSelectedNode(node);\n  }, []);\n  const updateNodeLabel = newLabel => {\n    if (selectedNode) {\n      setNodes(nds => nds.map(n => n.id === selectedNode.id ? {\n        ...n,\n        data: {\n          ...n.data,\n          label: newLabel\n        }\n      } : n));\n      setSelectedNode(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen\",\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dndflow\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reactflow-wrapper\",\n          ref: reactFlowWrapper,\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            nodes: nodes.map(node => ({\n              ...node,\n              data: {\n                ...node.data,\n                selected: node.id === (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.id)\n              }\n            })),\n            edges: edges,\n            onNodesChange: onNodesChange,\n            onEdgesChange: onEdgesChange,\n            onConnect: onConnect,\n            onInit: setReactFlowInstance,\n            onDrop: onDrop,\n            onDragOver: onDragOver,\n            onNodeClick: onNodeClick,\n            nodeTypes: nodeTypes // Register the custom node types\n            ,\n            children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Background, {\n              variant: \"dots\",\n              gap: 12,\n              size: 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), selectedNode ? /*#__PURE__*/_jsxDEV(SettingsPanel, {\n          selectedNode: selectedNode,\n          updateNodeLabel: updateNodeLabel,\n          setSelectedNode: setSelectedNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(Sidebar, {\n          setIsSettingsPanelOpen: setIsSettingsPanelOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 142\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(DnDFlow, \"/b7CRv0raRLW9t7iwiZ26Zd0Jp4=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = DnDFlow;\nexport default DnDFlow;\nvar _c;\n$RefreshReg$(_c, \"DnDFlow\");","map":{"version":3,"names":["React","useState","useRef","useCallback","ReactFlow","ReactFlowProvider","addEdge","useNodesState","useEdgesState","Controls","Background","Sidebar","CustomNode","Topbar","SettingsPanel","jsxDEV","_jsxDEV","initialNodes","id","type","data","label","position","x","y","sourcePosition","targetPosition","initialEdges","source","target","nodeTypes","getId","DnDFlow","_s","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowInstance","setReactFlowInstance","selectedNode","setSelectedNode","isSettingsPanelOpen","setIsSettingsPanelOpen","console","log","onConnect","params","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","getData","project","clientX","clientY","newNode","nds","concat","onNodeClick","node","updateNodeLabel","newLabel","map","n","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","selected","onInit","variant","gap","size","_c","$RefreshReg$"],"sources":["/home/avik/Documents/shyam/chatbot-flow/chatbot-flow-react/src/App.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  useNodesState,\n  useEdgesState,\n  Controls,\n  Background,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nimport Sidebar from './Sidebar';\nimport CustomNode from './CustomNode'; // Import Custom Node Component\nimport './index.css';\nimport Topbar from './Topbar';\nimport SettingsPanel from './SettingsPanel';\n\nconst initialNodes = [\n  {\n    id: '1',\n    type: 'message', // Specify the custom node type\n    data: { label: 'Custom Node' },\n    position: { x: 250, y: 20 },\n    sourcePosition: 'right',\n    targetPosition: 'left',\n  },\n  {\n    id: '2',\n    type: 'message', // Specify the custom node type\n    data: { label: 'Custom Node' },\n    position: { x: 550, y: 120 },\n    sourcePosition: 'right',\n    targetPosition: 'left',\n  },\n];\n\nconst initialEdges = [\n  { id: 'e1-2', source: '1', target: '2' },\n];\nconst nodeTypes = { 'message': CustomNode };\n\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\n\nconst DnDFlow = () => {\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isSettingsPanelOpen, setIsSettingsPanelOpen] = useState(false);\n\n  console.log({selectedNode});\n\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    [],\n  );\n\n  const onDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  const onDrop = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      const type = event.dataTransfer.getData('application/reactflow');\n\n      const position = reactFlowInstance.project({\n        x: event.clientX,\n        y: event.clientY,\n      });\n\n      const newNode = {\n        id: getId(),\n        type: 'message', // Specify the custom node type\n        sourcePosition: 'right',\n        targetPosition: 'left',\n        position,\n        data: { label: 'New Custom Node' },\n      };\n\n      setNodes((nds) => nds.concat(newNode));\n    },\n    [reactFlowInstance, setNodes],\n  );\n\n  const onNodeClick = useCallback((event, node) => {\n    console.log(\"hello world\");\n    setSelectedNode(node);\n  }, []);\n\n  const updateNodeLabel = (newLabel) => {\n    if (selectedNode) {\n      setNodes((nds) =>\n        nds.map((n) =>\n          n.id === selectedNode.id\n            ? {\n                ...n,\n                data: { ...n.data, label: newLabel },\n              }\n            : n\n        )\n      );\n      setSelectedNode(null)\n    }\n  };\n\n\n  return (\n    <div className='screen'>\n      <Topbar />\n      <div className=\"dndflow\">\n        <ReactFlowProvider>\n          <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n            <ReactFlow\n              nodes={nodes.map(node => ({\n                ...node,\n                data: {\n                  ...node.data,\n                  selected: node.id === selectedNode?.id,\n                },\n              }))}\n              edges={edges}\n              onNodesChange={onNodesChange}\n              onEdgesChange={onEdgesChange}\n              onConnect={onConnect}\n              onInit={setReactFlowInstance}\n              onDrop={onDrop}\n              onDragOver={onDragOver}\n              onNodeClick={onNodeClick}\n              nodeTypes={nodeTypes} // Register the custom node types\n            >\n              <Controls />\n              <Background variant=\"dots\" gap={12} size={1} />\n            </ReactFlow>\n          </div>\n          {selectedNode ? <SettingsPanel selectedNode={selectedNode} updateNodeLabel={updateNodeLabel} setSelectedNode={setSelectedNode}/> : <Sidebar setIsSettingsPanelOpen={setIsSettingsPanelOpen}/>}\n          {/* {selectedNode && (\n            <div>\n              <input\n                type=\"text\"\n                value={selectedNode.data.label}\n                onChange={(e) => updateNodeLabel(e.target.value)}\n              />\n            </div>\n          )} */}\n        </ReactFlowProvider>\n      </div>\n    </div>\n  );\n};\n\nexport default DnDFlow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}