{"ast":null,"code":"var _jsxFileName = \"/home/avik/Documents/shyam/chatbot-flow/chatbot-flow-react/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, useNodesState, useEdgesState, Controls, Background } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport Sidebar from './Sidebar';\nimport CustomNode from './CustomNode'; // Import Custom Node Component\nimport './index.css';\nimport Topbar from './Topbar';\nimport SettingsPanel from './SettingsPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  type: 'customNode',\n  // Specify the custom node type\n  data: {\n    label: 'Custom Node'\n  },\n  position: {\n    x: 250,\n    y: 20\n  },\n  sourcePosition: 'right',\n  targetPosition: 'left'\n}, {\n  id: '2',\n  type: 'customNode',\n  // Specify the custom node type\n  data: {\n    label: 'Custom Node'\n  },\n  position: {\n    x: 550,\n    y: 120\n  },\n  sourcePosition: 'right',\n  targetPosition: 'left'\n}];\nconst initialEdges = [{\n  id: 'e1-2',\n  source: '1',\n  target: '2'\n}];\nconst nodeTypes = {\n  customNode: CustomNode\n};\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\nconst DnDFlow = () => {\n  _s();\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  console.log({\n    selectedNode\n  });\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = reactFlowInstance.project({\n      x: event.clientX,\n      y: event.clientY\n    });\n    const newNode = {\n      id: getId(),\n      type: 'customNode',\n      // Specify the custom node type\n      sourcePosition: 'right',\n      targetPosition: 'left',\n      position,\n      data: {\n        label: 'New Custom Node'\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [reactFlowInstance, setNodes]);\n  const onNodeClick = useCallback((event, node) => {\n    console.log(\"hello world\");\n    setSelectedNode(node);\n  }, []);\n  const updateNodeLabel = newLabel => {\n    if (selectedNode) {\n      setNodes(nds => nds.map(n => n.id === selectedNode.id ? {\n        ...n,\n        data: {\n          ...n.data,\n          label: newLabel\n        }\n      } : n));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen\",\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dndflow\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reactflow-wrapper\",\n          ref: reactFlowWrapper,\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            nodes: nodes,\n            edges: edges,\n            onNodesChange: onNodesChange,\n            onEdgesChange: onEdgesChange,\n            onConnect: onConnect,\n            onInit: setReactFlowInstance,\n            onDrop: onDrop,\n            onDragOver: onDragOver,\n            onNodeClick: onNodeClick,\n            nodeTypes: nodeTypes // Register the custom node types\n            ,\n            children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Background, {\n              variant: \"dots\",\n              gap: 12,\n              size: 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), selectedNode ? /*#__PURE__*/_jsxDEV(SettingsPanel, {\n          selectedNode: selectedNode,\n          updateNodeLabel: updateNodeLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 108\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(DnDFlow, \"jVJRLXl4uEQY+i2zeqGwtIkETpM=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = DnDFlow;\nexport default DnDFlow;\nvar _c;\n$RefreshReg$(_c, \"DnDFlow\");","map":{"version":3,"names":["React","useState","useRef","useCallback","ReactFlow","ReactFlowProvider","addEdge","useNodesState","useEdgesState","Controls","Background","Sidebar","CustomNode","Topbar","SettingsPanel","jsxDEV","_jsxDEV","initialNodes","id","type","data","label","position","x","y","sourcePosition","targetPosition","initialEdges","source","target","nodeTypes","customNode","getId","DnDFlow","_s","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowInstance","setReactFlowInstance","selectedNode","setSelectedNode","console","log","onConnect","params","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","getData","project","clientX","clientY","newNode","nds","concat","onNodeClick","node","updateNodeLabel","newLabel","map","n","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onInit","variant","gap","size","_c","$RefreshReg$"],"sources":["/home/avik/Documents/shyam/chatbot-flow/chatbot-flow-react/src/App.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  useNodesState,\n  useEdgesState,\n  Controls,\n  Background,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nimport Sidebar from './Sidebar';\nimport CustomNode from './CustomNode'; // Import Custom Node Component\nimport './index.css';\nimport Topbar from './Topbar';\nimport SettingsPanel from './SettingsPanel';\n\nconst initialNodes = [\n  {\n    id: '1',\n    type: 'customNode', // Specify the custom node type\n    data: { label: 'Custom Node' },\n    position: { x: 250, y: 20 },\n    sourcePosition: 'right',\n    targetPosition: 'left',\n  },\n  {\n    id: '2',\n    type: 'customNode', // Specify the custom node type\n    data: { label: 'Custom Node' },\n    position: { x: 550, y: 120 },\n    sourcePosition: 'right',\n    targetPosition: 'left',\n  },\n];\n\nconst initialEdges = [\n  { id: 'e1-2', source: '1', target: '2' },\n];\nconst nodeTypes = { customNode: CustomNode };\n\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\n\nconst DnDFlow = () => {\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  console.log({selectedNode});\n\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    [],\n  );\n\n  const onDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  const onDrop = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      const type = event.dataTransfer.getData('application/reactflow');\n\n      const position = reactFlowInstance.project({\n        x: event.clientX,\n        y: event.clientY,\n      });\n      const newNode = {\n        id: getId(),\n        type: 'customNode', // Specify the custom node type\n        sourcePosition: 'right',\n        targetPosition: 'left',\n        position,\n        data: { label: 'New Custom Node' },\n      };\n\n      setNodes((nds) => nds.concat(newNode));\n    },\n    [reactFlowInstance, setNodes],\n  );\n\n  const onNodeClick = useCallback((event, node) => {\n    console.log(\"hello world\");\n    setSelectedNode(node);\n  }, []);\n\n  const updateNodeLabel = (newLabel) => {\n    if (selectedNode) {\n      setNodes((nds) =>\n        nds.map((n) =>\n          n.id === selectedNode.id\n            ? {\n                ...n,\n                data: { ...n.data, label: newLabel },\n              }\n            : n\n        )\n      );\n    }\n  };\n\n\n  return (\n    <div className='screen'>\n      <Topbar />\n      <div className=\"dndflow\">\n        <ReactFlowProvider>\n          <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n            <ReactFlow\n              nodes={nodes}\n              edges={edges}\n              onNodesChange={onNodesChange}\n              onEdgesChange={onEdgesChange}\n              onConnect={onConnect}\n              onInit={setReactFlowInstance}\n              onDrop={onDrop}\n              onDragOver={onDragOver}\n              onNodeClick={onNodeClick}\n              nodeTypes={nodeTypes} // Register the custom node types\n            >\n              <Controls />\n              <Background variant=\"dots\" gap={12} size={1} />\n            </ReactFlow>\n          </div>\n          {selectedNode ? <SettingsPanel selectedNode={selectedNode} updateNodeLabel={updateNodeLabel}/> : <Sidebar />}\n          {/* {selectedNode && (\n            <div>\n              <input\n                type=\"text\"\n                value={selectedNode.data.label}\n                onChange={(e) => updateNodeLabel(e.target.value)}\n              />\n            </div>\n          )} */}\n        </ReactFlowProvider>\n      </div>\n    </div>\n  );\n};\n\nexport default DnDFlow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}